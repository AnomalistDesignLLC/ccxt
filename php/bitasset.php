<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception as Exception; // a common import

class bitasset extends Exchange {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'bitasset',
            'name' => 'Bitasset',
            'countries' => array ( 'US' ),
            'version' => 'v1',
            'rateLimit' => 1500,
            'certified' => true,
            // new metainfo interface
            'has' => array (
                'fetchBalance' => true,
                'fetchMarkets' => true,
                'fetchCurrencies' => true,
                'CORS' => false,
                'createMarketOrder' => false,
                'fetchDepositAddress' => false,
                'fetchClosedOrders' => false,
                'fetchTrades' => false,
                'fetchOHLCV' => false,
                'fetchOrder' => false,
                'fetchOpenOrders' => false,
                'fetchTicker' => false,
                'withdraw' => false,
                'fetchDeposits' => false,
                'fetchWithdrawals' => false,
                'fetchTransactions' => false,
                'fetchOrderBook' => false,
                'fetchL2OrderBook' => false,
            ),
            'hostname' => 'api.bitasset.com',
            'urls' => array (
                'logo' => 'https://user-images.githubusercontent.com/1294454/27766352-cf0b3c26-5ed5-11e7-82b7-f3826b7a97d8.jpg',
                'api' => array (
                    'public' => 'https://{hostname}',
                    'accounts' => 'https://{hostname}',
                ),
                'www' => 'https://bitasset.com',
                'doc' => array (
                    'https://bitasset.github.io/api/',
                    'https://www.npmjs.com/package/bitasset-node',
                ),
                'fees' => array (
                    'https://bitasset.zendesk.com/hc/en-us/articles/115003684371-bitasset-SERVICE-FEES-AND-WITHDRAWAL-LIMITATIONS',
                    'https://bitasset.zendesk.com/hc/en-us/articles/115000199651-What-fees-does-bitasset-charge-',
                ),
            ),
            'api' => array (
                'public' => array (
                    'get' => array (
                        'symbols',
                        'currencies',
                    ),
                ),
                'accounts' => array (
                    'get' => array (
                        'balance',
                    ),
                ),
            ),
        ));
    }

    public function fetch_markets ($params = array ()) {
        $response = $this->publicGetSymbols ();
        $result = array ();
        $markets = $this->safe_value($response, 'data');
        for ($i = 0; $i < count ($markets); $i++) {
            $market = $markets[$i];
            $id = $market['id'];
            $baseId = $market['baseCurrency'];
            $quoteId = $market['quoteCurrency'];
            $base = $this->common_currency_code($baseId);
            $quote = $this->common_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $result[] = array (
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
            );
        }
        return $result;
    }

    public function fetch_currencies ($params = array ()) {
        $response = $this->publicGetCurrencies ($params);
        $currencies = $this->safe_value($response, 'data', array ());
        $result = array ();
        for ($i = 0; $i < count ($currencies); $i++) {
            $currency = $currencies[$i];
            $id = $this->safe_string($currency, 'id');
            $code = $this->common_currency_code($id);
            $name = $this->safe_string($currency, 'name');
            $result[$name] = array (
                'id' => $id,
                'name' => $name,
                'code' => $code,
            );
        }
        return $result;
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        $response = $this->accountsGetBalance ($params);
        $balances = $response['data'];
        $result = array ( 'info' => $balances );
        $indexed = $this->index_by($balances, 'currency');
        $keys = is_array ($indexed) ? array_keys ($indexed) : array ();
        for ($i = 0; $i < count ($keys); $i++) {
            $id = $keys[$i];
            $currency = $this->common_currency_code($id);
            $account = $this->account ();
            $balance = $indexed[$id];
            $free = $this->safe_float($balance, 'available', 0);
            $total = $this->safe_float($balance, 'balance', 0);
            $used = $this->safe_float($balance, 'frozen', 0);
            $account['free'] = $free;
            $account['used'] = $used;
            $account['total'] = $total;
            $result[$currency] = $account;
        }
        return $this->parse_balance($result);
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->implode_params($this->urls['api'][$api], array (
            'hostname' => $this->hostname,
        )) . '/';
        $url .= $this->version . '/cash/';
        if ($api === 'public') {
            $url .= $api . '/' . $path;
            if ($params)
                $url .= '?' . $this->urlencode ($params);
        } else {
            $this->check_required_credentials();
            $url .= $api . '/';
            $request = array (
                'apiAccessKey' => $this->apiKey,
            );
            $request['apiTimeStamp'] = $this->milliseconds ();
            $url .= $path . '?' . $this->urlencode (array_merge ($request, $params));
            $secret = $this->hash ($this->encode ($this->secret), 'sha1');
            $signature = $this->hmac ($this->urlencode (array_merge ($request, $params)), $this->encode ($secret), 'SHA256');
            $url .= '&' . $this->urlencode (array_merge (array (
                'apiSign' => $signature,
            )));
            $headers = array ();
        }
        return array ( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors ($code, $reason, $url, $method, $headers, $body, $response) {
        if ($body[0] === '{') {
            // array ( $success => false, $message => "$message" )
            $success = $this->safe_value($response, 'msg');
            if ($success === null)
                throw new ExchangeError ($this->id . ' => malformed $response => ' . $this->json ($response));
            if (gettype ($success) === 'string') {
                // bleutrade uses string instead of boolean
                $success = ($success === 'success') ? true : false;
            }
            if (!$success) {
                $message = $this->safe_string($response, 'message');
                $feedback = $this->id . ' ' . $this->json ($response);
                $exceptions = $this->exceptions;
                if ($message === 'APIKEY_INVALID') {
                    if ($this->options['hasAlreadyAuthenticatedSuccessfully']) {
                        throw new DDoSProtection ($feedback);
                    } else {
                        throw new AuthenticationError ($feedback);
                    }
                }
                if ($message === 'DUST_TRADE_DISALLOWED_MIN_VALUE_50K_SAT')
                    throw new InvalidOrder ($this->id . ' order cost should be over 50k satoshi ' . $this->json ($response));
                if ($message === 'INVALID_ORDER') {
                    // Bitasset will return an ambiguous INVALID_ORDER $message
                    // upon canceling already-canceled and closed orders
                    // therefore this special case for cancelOrder
                    // $url = 'https://bitasset.com/api/v1.1/market/cancel?apikey=API_KEY&uuid=ORDER_UUID'
                    $cancel = 'cancel';
                    $indexOfCancel = mb_strpos ($url, $cancel);
                    if ($indexOfCancel >= 0) {
                        $parts = explode ('&', $url);
                        $orderId = null;
                        for ($i = 0; $i < count ($parts); $i++) {
                            $part = $parts[$i];
                            $keyValue = explode ('=', $part);
                            if ($keyValue[0] === 'uuid') {
                                $orderId = $keyValue[1];
                                break;
                            }
                        }
                        if ($orderId !== null)
                            throw new OrderNotFound ($this->id . ' cancelOrder ' . $orderId . ' ' . $this->json ($response));
                        else
                            throw new OrderNotFound ($this->id . ' cancelOrder ' . $this->json ($response));
                    }
                }
                if (is_array ($exceptions) && array_key_exists ($message, $exceptions))
                    throw new $exceptions[$message] ($feedback);
                if ($message !== null) {
                    if (mb_strpos ($message, 'throttled. Try again') !== false)
                        throw new DDoSProtection ($feedback);
                    if (mb_strpos ($message, 'problem') !== false)
                        throw new ExchangeNotAvailable ($feedback); // 'There was a problem processing your request.  If this problem persists, please contact...')
                }
                throw new ExchangeError ($feedback);
            }
        }
    }

    public function append_timezone_parse8601 ($x) {
        $length = is_array ($x) ? count ($x) : 0;
        $lastSymbol = $x[$length - 1];
        if (($lastSymbol === 'Z') || (mb_strpos ($x, '+') !== false)) {
            return $this->parse8601 ($x);
        }
        return $this->parse8601 ($x . 'Z');
    }

    public function request ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $response = $this->fetch2 ($path, $api, $method, $params, $headers, $body);
        // a workaround for APIKEY_INVALID
        if (($api === 'account') || ($api === 'market'))
            $this->options['hasAlreadyAuthenticatedSuccessfully'] = true;
        return $response;
    }
}
